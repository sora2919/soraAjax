
@{
    ViewData["Title"] = "First";
}

<h1>First</h1>

<button id="btn" class="btn btn-primary">click</button>
<img src="\images\load.gif" id="load" />
<div id="div1" class="alert alert-info"></div>



@section Styles{
    <style>
        #load {
            display: none
        }
    </style>
}

@section Scripts{
    <script>
        const btn = document.querySelector('#btn')
        const myDiv = document.querySelector('#div1')
        const imgLoad = document.querySelector('#load')

        //步驟1 開啟一個XMLHttpRequest
        const xhr = new XMLHttpRequest();

        //設定讀取開始時會執行甚麼
        xhr.addEventListener('loadstart', () => {
            btn.setAttribute('disabled', 'disabled');
            btn.textContent = "執行中...."
            imgLoad.style.display = "inline"
            myDiv.innerHTML += `<h3>Ajax開始</h3>`

        })

        //設定讀取結束時會執行甚麼
        xhr.addEventListener('loadend',()=>{
            btn.removeAttribute('disabled');
            btn.textContent = "Click"
            imgLoad.style.display = "none"
            myDiv.innerHTML += `<h3>Ajax結束</h3>`

        })



        btn.addEventListener('click',()=>{
            //myDiv.innerHTML="Button Click"

            //步驟2 對伺服器發出要求(Request)
            xhr.open('GET', '/api/index');//這個類似只有打網址，還沒按下enter
            xhr.send();//這步驟才等於有按下送出

            //步驟3 接收伺服器回傳的資料 下面的load事件是xhr.send()發出後，回傳的資料確定有下載完成才會出現的事件
            xhr.addEventListener('load',()=>{
                const data = xhr.responseText//步驟4 讀資料 因為這邊是純string所以responseText，如果是XML就要responseXML
                //步驟5 顯示資料
                myDiv.innerHTML = `<h3>${data}</h3>`
            })


        })

    </script>
}
